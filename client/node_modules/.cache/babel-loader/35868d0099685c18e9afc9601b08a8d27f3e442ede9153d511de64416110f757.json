{"ast":null,"code":"var _jsxFileName = \"/Users/hector_cardez/Desktop/2025/CINE_SCORE/CINE_SCORE/client/src/components/MyFavorites.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Function to toggle favourites and update sessionStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst toggleFavourite = (movie, isFavourite) => {\n  const storedFavourites = JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\n  if (isFavourite) {\n    // Remove from favourites\n    const updatedFavourites = storedFavourites.filter(fav => fav.id !== movie.id);\n    sessionStorage.setItem(\"favourites\", JSON.stringify(updatedFavourites));\n    return false; // Return false indicating movie is no longer a favourite\n  } else {\n    // Add to favourites\n    storedFavourites.push(movie);\n    sessionStorage.setItem(\"favourites\", JSON.stringify(storedFavourites));\n    return true; // Return true indicating movie is now a favourite\n  }\n};\n\n// Defined const for favourite and nonFavourite images\nconst favourite = \"/assets/star.png\";\nconst nonFavourite = \"/assets/starFavourite.png\";\n\n// Function to get the image source and class based on favourite status\nconst getFavouriteImage = isFavourite => {\n  return isFavourite ? favourite : nonFavourite;\n};\n\n// Share favourites function\nexport const shareFavourites = favourites => {\n  if (!favourites || favourites.length === 0) {\n    return \"No favourite movies to share.\";\n  }\n\n  // Generate a shareable link\n  const movieTitles = favourites.map(movie => movie.title).join(\", \");\n  const shareableLink = `Check out my favorite movies: ${movieTitles}`;\n\n  // You can also implement sharing via the Web Share API if you want\n  if (navigator.share) {\n    navigator.share({\n      title: \"My Favourite Movies\",\n      text: shareableLink,\n      url: window.location.href // Link to your app/page\n    }).then(() => {}).catch(error => {\n      console.error(\"Error sharing:\", error);\n    });\n  } else {\n    // Fallback for browsers that don't support the Web Share API\n    alert(shareableLink);\n  }\n  return shareableLink;\n};\nconst MyFavourites = () => {\n  _s();\n  const [favouriteMovies, setFavouriteMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Retrieve favourites from sessionStorage\n    const storedFavourites = JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\n    setFavouriteMovies(storedFavourites);\n\n    // Call the backend to save favourites\n    const saveFavourites = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/favourites\", {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            userId: \"e62a17e5-9c48-4a71-b7d8-1e2e7c6fcf3d\",\n            // Keeping the same userId as requested\n            favourites: storedFavourites\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          console.error(\"Failed to update favourites:\", errorData.message);\n          throw new Error(\"Failed to update favourites\");\n        }\n        const data = await response.json();\n      } catch (error) {\n        console.error(\"Error in saveFavourites:\", error);\n      }\n    };\n    if (storedFavourites.length > 0) {\n      saveFavourites();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movies-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-wrapper\",\n      children: favouriteMovies.length > 0 ? favouriteMovies.map(movie => {\n        const isFavourite = true;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-item\",\n          onClick: () => {\n            navigate(`/movies/${movie.id}`);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w500${movie.poster_path}`,\n            alt: movie.title,\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Add some movies to your favourites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"share-button\",\n        onClick: () => shareFavourites(favouriteMovies),\n        children: \"Share Favourites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(MyFavourites, \"mdJrvD3l0bzI/juK9Ss12WRoiVE=\", false, function () {\n  return [useNavigate];\n});\n_c = MyFavourites;\nexport default MyFavourites;\nvar _c;\n$RefreshReg$(_c, \"MyFavourites\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","toggleFavourite","movie","isFavourite","storedFavourites","JSON","parse","sessionStorage","getItem","updatedFavourites","filter","fav","id","setItem","stringify","push","favourite","nonFavourite","getFavouriteImage","shareFavourites","favourites","length","movieTitles","map","title","join","shareableLink","navigator","share","text","url","window","location","href","then","catch","error","console","alert","MyFavourites","_s","favouriteMovies","setFavouriteMovies","navigate","saveFavourites","response","fetch","method","headers","body","userId","ok","errorData","json","message","Error","data","className","children","onClick","src","poster_path","alt","loading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hector_cardez/Desktop/2025/CINE_SCORE/CINE_SCORE/client/src/components/MyFavorites.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Function to toggle favourites and update sessionStorage\nconst toggleFavourite = (movie, isFavourite) => {\n  const storedFavourites =\n    JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\n\n  if (isFavourite) {\n    // Remove from favourites\n    const updatedFavourites = storedFavourites.filter(\n      (fav) => fav.id !== movie.id\n    );\n    sessionStorage.setItem(\"favourites\", JSON.stringify(updatedFavourites));\n    return false; // Return false indicating movie is no longer a favourite\n  } else {\n    // Add to favourites\n    storedFavourites.push(movie);\n    sessionStorage.setItem(\"favourites\", JSON.stringify(storedFavourites));\n    return true; // Return true indicating movie is now a favourite\n  }\n};\n\n// Defined const for favourite and nonFavourite images\nconst favourite = \"/assets/star.png\";\nconst nonFavourite = \"/assets/starFavourite.png\";\n\n// Function to get the image source and class based on favourite status\nconst getFavouriteImage = (isFavourite) => {\n  return isFavourite ? favourite : nonFavourite;\n};\n\n// Share favourites function\nexport const shareFavourites = (favourites) => {\n  if (!favourites || favourites.length === 0) {\n    return \"No favourite movies to share.\";\n  }\n\n  // Generate a shareable link\n  const movieTitles = favourites.map((movie) => movie.title).join(\", \");\n  const shareableLink = `Check out my favorite movies: ${movieTitles}`;\n\n  // You can also implement sharing via the Web Share API if you want\n  if (navigator.share) {\n    navigator\n      .share({\n        title: \"My Favourite Movies\",\n        text: shareableLink,\n        url: window.location.href, // Link to your app/page\n      })\n      .then(() => {})\n      .catch((error) => {\n        console.error(\"Error sharing:\", error);\n      });\n  } else {\n    // Fallback for browsers that don't support the Web Share API\n    alert(shareableLink);\n  }\n\n  return shareableLink;\n};\n\nconst MyFavourites = () => {\n  const [favouriteMovies, setFavouriteMovies] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Retrieve favourites from sessionStorage\n    const storedFavourites =\n      JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\n\n    setFavouriteMovies(storedFavourites);\n\n    // Call the backend to save favourites\n    const saveFavourites = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/favourites\", {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            userId: \"e62a17e5-9c48-4a71-b7d8-1e2e7c6fcf3d\", // Keeping the same userId as requested\n            favourites: storedFavourites,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          console.error(\"Failed to update favourites:\", errorData.message);\n          throw new Error(\"Failed to update favourites\");\n        }\n\n        const data = await response.json();\n      } catch (error) {\n        console.error(\"Error in saveFavourites:\", error);\n      }\n    };\n\n    if (storedFavourites.length > 0) {\n      saveFavourites();\n    }\n  }, []);\n\n  return (\n    <div className=\"movies-container\">\n      <div className=\"movies-wrapper\">\n        {favouriteMovies.length > 0 ? (\n          favouriteMovies.map((movie) => {\n            const isFavourite = true;\n\n            return (\n              <div\n                key={movie.id}\n                className=\"movie-item\"\n                onClick={() => {\n                  navigate(`/movies/${movie.id}`);\n                }}\n              >\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                  alt={movie.title}\n                  loading=\"lazy\"\n                />\n              </div>\n            );\n          })\n        ) : (\n          <div>Add some movies to your favourites</div>\n        )}\n      </div>\n\n      {/* \n      <div>\n        <div>\n          <button>Add some</button>\n        </div>\n        <div>Friends' Top Picks</div>\n        <div>movies here</div>\n      </div>\n        */}\n\n      <div>\n        <button\n          className=\"share-button\"\n          onClick={() => shareFavourites(favouriteMovies)}\n        >\n          Share Favourites\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MyFavourites;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}