{"ast":null,"code":"// toggles favourites and update sessionStorage\nconst toggleFavourite = (movie, isFavourite) => {\n  // Retrieve the current list of favourites from sessionStorage\n  const storedFavourites = JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\n\n  // Check if the movie is currently marked as a favourite\n  if (isFavourite) {\n    // If it is a favourite, filter it out from the stored favourites\n    const updatedFavourites = storedFavourites.filter(fav => fav.id !== movie.id // Keep only the favourites that do not match the current movie's ID\n    );\n\n    // Update sessionStorage with the new list of favourites\n    sessionStorage.setItem(\"favourites\", JSON.stringify(updatedFavourites));\n\n    // Return false indicating the movie is no longer a favourite\n    return false;\n  } else {\n    // If it is not a favourite, add the current movie to the favourites list\n    storedFavourites.push(movie);\n\n    // Update sessionStorage with the new favourites list including the newly added movie\n    sessionStorage.setItem(\"favourites\", JSON.stringify(storedFavourites));\n    return true;\n  }\n};\n\n// Function to get the favourite image based on the favourite status\nconst getFavouriteImage = isFavourite => {\n  const favourite = \"/assets/star.png\";\n  const nonFavourite = \"/assets/starFavourite.png\";\n\n  // Return the appropriate image path based on the favourite status\n  return isFavourite ? favourite : nonFavourite;\n};\nexport default {\n  toggleFavourite,\n  getFavouriteImage\n};","map":{"version":3,"names":["toggleFavourite","movie","isFavourite","storedFavourites","JSON","parse","sessionStorage","getItem","updatedFavourites","filter","fav","id","setItem","stringify","push","getFavouriteImage","favourite","nonFavourite"],"sources":["/Users/hector_cardez/Desktop/2025/CINE_SCORE/CINE_SCORE/client/src/helpers/favouritesHelper.js"],"sourcesContent":["// toggles favourites and update sessionStorage\nconst toggleFavourite = (movie, isFavourite) => {\n  // Retrieve the current list of favourites from sessionStorage\n  const storedFavourites =\n    JSON.parse(sessionStorage.getItem(\"favourites\")) || [];\n\n  // Check if the movie is currently marked as a favourite\n  if (isFavourite) {\n    // If it is a favourite, filter it out from the stored favourites\n    const updatedFavourites = storedFavourites.filter(\n      (fav) => fav.id !== movie.id // Keep only the favourites that do not match the current movie's ID\n    );\n\n    // Update sessionStorage with the new list of favourites\n    sessionStorage.setItem(\"favourites\", JSON.stringify(updatedFavourites));\n\n    // Return false indicating the movie is no longer a favourite\n    return false;\n  } else {\n    // If it is not a favourite, add the current movie to the favourites list\n    storedFavourites.push(movie);\n\n    // Update sessionStorage with the new favourites list including the newly added movie\n    sessionStorage.setItem(\"favourites\", JSON.stringify(storedFavourites));\n\n    return true;\n  }\n};\n\n// Function to get the favourite image based on the favourite status\nconst getFavouriteImage = (isFavourite) => {\n  const favourite = \"/assets/star.png\";\n  const nonFavourite = \"/assets/starFavourite.png\";\n\n  // Return the appropriate image path based on the favourite status\n  return isFavourite ? favourite : nonFavourite;\n};\n\nexport default { toggleFavourite, getFavouriteImage };\n"],"mappings":"AAAA;AACA,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EAC9C;EACA,MAAMC,gBAAgB,GACpBC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE;;EAExD;EACA,IAAIL,WAAW,EAAE;IACf;IACA,MAAMM,iBAAiB,GAAGL,gBAAgB,CAACM,MAAM,CAC9CC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKV,KAAK,CAACU,EAAE,CAAC;IAC/B,CAAC;;IAED;IACAL,cAAc,CAACM,OAAO,CAAC,YAAY,EAAER,IAAI,CAACS,SAAS,CAACL,iBAAiB,CAAC,CAAC;;IAEvE;IACA,OAAO,KAAK;EACd,CAAC,MAAM;IACL;IACAL,gBAAgB,CAACW,IAAI,CAACb,KAAK,CAAC;;IAE5B;IACAK,cAAc,CAACM,OAAO,CAAC,YAAY,EAAER,IAAI,CAACS,SAAS,CAACV,gBAAgB,CAAC,CAAC;IAEtE,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMY,iBAAiB,GAAIb,WAAW,IAAK;EACzC,MAAMc,SAAS,GAAG,kBAAkB;EACpC,MAAMC,YAAY,GAAG,2BAA2B;;EAEhD;EACA,OAAOf,WAAW,GAAGc,SAAS,GAAGC,YAAY;AAC/C,CAAC;AAED,eAAe;EAAEjB,eAAe;EAAEe;AAAkB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}